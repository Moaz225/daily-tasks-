import logging
import asyncio
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
from pytz import timezone

nest_asyncio.apply()
TOKEN = "7587071583:AAFN8TC9Od89D_nhe7scVholgT9NUenJBnY"
GROUP_CHAT_ID = -4960478787
logging.basicConfig(level=logging.INFO)

# ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿØŸäŸÜÿßŸÖŸäŸÉŸäÿ© ŸÑŸÑŸàÿ≠ÿ© ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ±
current_keyboard = []
current_message_id = None
user_task_log = {}

daily_tasks = {
    0: [  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        "–ß–∏—Å—Ç–∫–∞ –∫–æ—Ñ–µ–º–æ–ª–∫–∏",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –≤–µ—Ä—Ö–Ω–∏–µ –ø–æ–ª–∫–∏ –≤ –±–∞—Ä–µ",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –≤ —Ç—É–∞–ª–µ—Ç–∞—Ö",
        "–ü–æ–ª–∏–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–µ—Ä–∏–ª–∞"
    ],
    1: [  # –í—Ç–æ—Ä–Ω–∏–∫
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–µ–Ω—ã –≤ –±–∞—Ä–µ",
        "–ü–æ–ø—Ä–æ—Å–∏—Ç—å –º–æ–π—â–∏—Ü—É –æ—Ç—Ç–µ—Ä–µ—Ç—å —Å—Ç—ã–∫–∏",
        "–ü–æ–º—ã—Ç—å —Ä–∞–∫–æ–≤–∏–Ω—É",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –≤ —Ç—É–∞–ª–µ—Ç–∞—Ö"
    ],
    2: [  # –°—Ä–µ–¥–∞
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–æ–π–∫–∏ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
        "–ü–æ—Ä—è–¥–æ–∫ –Ω–∞ –ø–æ–ª–∫–∞—Ö –ø–æ–¥ –±–∞—Ä–æ–º",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –≤ —Ç—É–∞–ª–µ—Ç–∞—Ö"
    ],
    3: [  # –ß–µ—Ç–≤–µ—Ä–≥
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–ª–∞—Ñ–æ–Ω—ã –Ω–∞ 1 –∏ 2 —ç—Ç–∞–∂–∞—Ö",
        "–ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –∫–Ω–∏–∂–Ω—ã–π —Å—Ç–µ–ª–ª–∞–∂",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –≤ —Ç—É–∞–ª–µ—Ç–∞—Ö",
        "–ü–æ–ª–∏–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–µ—Ä–∏–ª–∞"
    ],
    4: [  # –ü—è—Ç–Ω–∏—Ü–∞
        "–ü–æ–º—ã—Ç—å –±–∞—Ä–Ω—ã–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
        "–ü–æ–º—ã—Ç—å –æ–±–µ –≤–∏—Ç—Ä–∏–Ω—ã",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –≤ —Ç—É–∞–ª–µ—Ç–∞—Ö"
    ],
    5: [  # –°—É–±–±–æ—Ç–∞
        "–ü–æ–º—ã—Ç—å –∏ –ø—Ä–∏–±—Ä–∞—Ç—å –∑–æ–Ω—É –≤—ã–¥–∞—á–∏ –Ω–∞ –∫—É—Ö–Ω–µ",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –≤ —Ç—É–∞–ª–µ—Ç–∞—Ö"
    ],
    6: [  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –∫–Ω–∏–∂–Ω—ã–π —Å—Ç–µ–ª–ª–∞–∂",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –≤ —Ç—É–∞–ª–µ—Ç–∞—Ö",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Å—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–∏",
        "–ü–æ–ª–∏–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–µ—Ä–∏–ª–∞"
    ]
}

async def send_daily_task(context: ContextTypes.DEFAULT_TYPE):
    global current_keyboard, current_message_id, user_task_log
    time_now = datetime.now(timezone("Asia/Yekaterinburg"))
    day = time_now.weekday()
    date_str = time_now.strftime("%d.%m.%Y")
    tasks = daily_tasks.get(day, [])

    user_task_log.clear()

    if not tasks:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üì≠ –°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç")
        return

    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    header = f"üßº *{day_names[day]} ‚Äì {date_str}*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:"

    current_keyboard = []
    for i, task in enumerate(tasks):
        current_keyboard.append([InlineKeyboardButton(f"‚òë {task}", callback_data=f"task_{i}")])
    current_keyboard.append([InlineKeyboardButton("‚úÖ –Ø –≤—Å—ë –≤—ã–ø–æ–ª–Ω–∏–ª!", callback_data="all_done")])

    sent_message = await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=header,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(current_keyboard)
    )

    current_message_id = sent_message.message_id

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_keyboard, current_message_id
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_name = query.from_user.first_name
    time_now = datetime.now(timezone("Asia/Yekaterinburg"))
    day = time_now.weekday()
    tasks = daily_tasks.get(day, [])

    if user_id not in user_task_log:
        user_task_log[user_id] = set()

    data = query.data

    if data == "all_done":
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"‚úÖ {user_name} –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) *–≤—Å–µ* –∑–∞–¥–∞—á–∏!", parse_mode="Markdown")
        return

    if data.startswith("task_"):
        index = int(data.split("_")[1])
        if 0 <= index < len(tasks):
            if index in user_task_log[user_id]:
                await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"‚ö†Ô∏è {user_name}, –≤—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–¥–∞—á—É: *{tasks[index]}*", parse_mode="Markdown")
            else:
                user_task_log[user_id].add(index)
                await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"‚úÖ {user_name} –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –∑–∞–¥–∞—á—É: *{tasks[index]}*", parse_mode="Markdown")

                # üß† ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≤ÿ± ŸÖŸÜ ÿßŸÑŸÑŸàÿ≠ÿ©
                new_keyboard = []
                for row in current_keyboard:
                    new_row = [btn for btn in row if btn.callback_data != data]
                    if new_row:
                        new_keyboard.append(new_row)
                current_keyboard = new_keyboard

                # ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿ®ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ¨ÿØŸäÿØÿ©
                await context.bot.edit_message_reply_markup(
                    chat_id=GROUP_CHAT_ID,
                    message_id=current_message_id,
                    reply_markup=InlineKeyboardMarkup(current_keyboard)
                )

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CallbackQueryHandler(button_handler))

    class DummyContext:
        bot = app.bot

    await send_daily_task(DummyContext())

    scheduler = BackgroundScheduler(timezone="Asia/Yekaterinburg")
    scheduler.add_job(lambda: asyncio.create_task(send_daily_task(DummyContext())), "cron", hour=13, minute=0)
    scheduler.start()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())